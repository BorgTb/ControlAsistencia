import AuditoriaModel from '../model/AuditoriaModel.js';

class AuditoriaController {
    
    // Obtener todos los registros de auditor√≠a
    static async obtenerRegistrosAuditoria(req, res) {
        try {
            const limite = req.query.limite || 50;
            const registros = await AuditoriaModel.obtenerRegistrosAuditoria(parseInt(limite));
            
            res.status(200).json({
                success: true,
                message: 'Registros de auditor√≠a obtenidos exitosamente',
                data: registros
            });
        } catch (error) {
            console.error('Error al obtener registros de auditor√≠a:', error);
            res.status(500).json({
                success: false,
                message: 'Error interno del servidor',
                error: error.message
            });
        }
    }

    // Obtener registros de auditor√≠a de un usuario espec√≠fico
    static async obtenerRegistrosPorUsuario(req, res) {
        try {
            const { usuario_id } = req.params;
            const limite = req.query.limite || 20;
            
            const registros = await AuditoriaModel.obtenerRegistrosPorUsuario(
                parseInt(usuario_id), 
                parseInt(limite)
            );
            
            res.status(200).json({
                success: true,
                message: 'Registros de auditor√≠a del usuario obtenidos exitosamente',
                data: registros
            });
        } catch (error) {
            console.error('Error al obtener registros de auditor√≠a por usuario:', error);
            res.status(500).json({
                success: false,
                message: 'Error interno del servidor',
                error: error.message
            });
        }
    }

    // Obtener estad√≠sticas de sesiones
    static async obtenerEstadisticasSesiones(req, res) {
        try {
            const estadisticas = await AuditoriaModel.obtenerEstadisticasSesiones();
            
            res.status(200).json({
                success: true,
                message: 'Estad√≠sticas de sesiones obtenidas exitosamente',
                data: estadisticas
            });
        } catch (error) {
            console.error('Error al obtener estad√≠sticas de sesiones:', error);
            res.status(500).json({
                success: false,
                message: 'Error interno del servidor',
                error: error.message
            });
        }
    }

    // Registrar cierre de sesi√≥n manual
    static async registrarCierreSesion(req, res) {
        try {
            const { usuario_id, sesion_id } = req.body;
            
            const resultado = await AuditoriaModel.registrarCierreSesion(usuario_id, sesion_id);
            
            if (resultado) {
                res.status(200).json({
                    success: true,
                    message: 'Cierre de sesi√≥n registrado exitosamente'
                });
            } else {
                res.status(404).json({
                    success: false,
                    message: 'No se encontr√≥ sesi√≥n activa para cerrar'
                });
            }
        } catch (error) {
            console.error('Error al registrar cierre de sesi√≥n:', error);
            res.status(500).json({
                success: false,
                message: 'Error interno del servidor',
                error: error.message
            });
        }
    }

    // Cerrar sesi√≥n del usuario actual
    static async cerrarSesionUsuario(req, res) {
        try {
            console.log('üî• === INICIANDO CIERRE DE SESI√ìN ===');
            console.log('üì® Datos recibidos en req.body:', req.body);
            console.log('üë§ Datos del usuario en req.user:', req.user);
            
            const usuario_id = req.user?.id || req.body.usuario_id;
            console.log('üÜî Usuario ID extra√≠do:', usuario_id);
            
            if (!usuario_id) {
                console.log('‚ùå No se encontr√≥ ID de usuario');
                return res.status(400).json({
                    success: false,
                    message: 'ID de usuario requerido'
                });
            }

            console.log('üîÑ Llamando a AuditoriaModel.cerrarSesionUsuario...');
            const resultado = await AuditoriaModel.cerrarSesionUsuario(usuario_id);
            console.log('‚úÖ Resultado del modelo:', resultado);
            
            res.status(200).json({
                success: true,
                message: `Sesi√≥n cerrada exitosamente. ${resultado.sesiones_cerradas} sesiones actualizadas`,
                data: resultado
            });
            console.log('üì§ Respuesta enviada exitosamente');
        } catch (error) {
            console.error('‚ùå Error en cerrarSesionUsuario controller:', error);
            console.error('üìç Stack trace:', error.stack);
            res.status(500).json({
                success: false,
                message: 'Error interno del servidor',
                error: error.message
            });
        }
    }

    // Cerrar sesiones expiradas (endpoint de mantenimiento)
    static async cerrarSesionesExpiradas(req, res) {
        try {
            const horasExpiracion = req.body.horas || 24;
            
            const sesionesActualizadas = await AuditoriaModel.cerrarSesionesExpiradas(horasExpiracion);
            
            res.status(200).json({
                success: true,
                message: `Se cerraron ${sesionesActualizadas} sesiones expiradas`,
                sesiones_cerradas: sesionesActualizadas
            });
        } catch (error) {
            console.error('Error al cerrar sesiones expiradas:', error);
            res.status(500).json({
                success: false,
                message: 'Error interno del servidor',
                error: error.message
            });
        }
    }
}

export default AuditoriaController;